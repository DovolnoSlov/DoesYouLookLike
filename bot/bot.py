from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
import os
import yaml
from model import model_predict

import config_bot   # —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–∫–µ–Ω —á–∞—Ç-–±–æ—Ç–∞

# log level
import logging
logging.basicConfig(level=logging.INFO)

__config_path = os.path.abspath(os.path.join('..', 'config', 'config_model.yaml'))
with open(os.path.join(__config_path)) as f:
    config = yaml.safe_load(f)

PATH_SAVE_USER_IMAGE = os.path.abspath(os.path.join('..', *config['predict']['path']))

# bot init
bot = Bot(token=config_bot.TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class UserState(StatesGroup):
    gender = State()    # –Ω–∞ –±—É–¥—É—â–µ–µ, –¥–ª—è –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª–æ–≤
    photo = State()


@dp.message_handler(commands=['start', 'help'])
async def send_help(message: types.Message):
    bot_name = await bot.get_me()
    await message.reply(f"–ú–µ–Ω—è –∑–æ–≤—É—Ç {bot_name['username']}, "
                        f"–ø—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!\n"
                        f"/like - –ø–æ –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ –í—ã –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç—É, "
                        f"–≤ —Ä–∞–º–∫–∞—Ö –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, "
                        f"–∏ –í—ã –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ö–æ–∂–µ—Å—Ç–∏ —Å –∫–µ–º-—Ç–æ –∏–∑ –∑–Ω–∞–º–µ–Ω–∏—Ç—ã—Ö –ª—é–¥–µ–π!")


@dp.message_handler(commands=['like'])
async def user_register(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ['–ú', '–ñ']
    keyboard.add(*buttons)

    user_full_name = message.from_user.full_name
    answer_text = "–ù–∞—á–Ω—ë–º, {name}!" \
                  "\n—É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª".format(name=user_full_name)

    logging.info(f'–ù–∞–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã start')
    await message.answer(answer_text, reply_markup=keyboard)
    await UserState.gender.set()


@dp.message_handler(state=UserState.gender)
async def get_username(message: types.Message, state: FSMContext):
    await state.update_data(user_gender=message.text)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é", reply_markup=types.ReplyKeyboardRemove())
    logging.info(f'–ü–æ–ª –≤—ã–±—Ä–∞–Ω')
    await UserState.photo.set()


@dp.message_handler(state=UserState.photo, content_types=['document', 'photo', 'text'])
async def get_address(message: types.Message, state: FSMContext):
    if message.content_type in ['document', 'photo']:
        inp_photo, path_save = await __doc_type_path(message)
        await inp_photo.download(destination_file=path_save)
        await message.reply('–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.')
        logging.info("–ó–∞–∫–∞—á–∫–∞ —Ñ–æ—Ç–æ, —Ñ–∏–Ω–∞–ª")

        model = model_predict.PredictModelImgLR(path_save)
        answer_pred = await model.predict_model()
        await message.answer(answer_pred)
        logging.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –æ—Ç–≤–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω")
    else:
        answer = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –Ω–∞—á–∏–Ω–∞—è —Å –∫–æ–º–∞–Ω–¥—ã /start"
        await message.reply(answer)
        logging.info("–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

    await state.finish()


async def __doc_type_path(message):
    if message.content_type == 'document':
        inp_photo = message.document
    elif message.content_type == 'photo':
        inp_photo = message.photo[-1]
    user_name = message.from_user.username
    user_photo_name = f'{user_name}_photo.jpg'
    path_save = os.path.join(PATH_SAVE_USER_IMAGE, user_name, user_photo_name)
    logging.info(f"–ó–∞–∫–∞—á–∫–∞ —Ñ–æ—Ç–æ, —ç—Ç–∞–ø 2")
    return inp_photo, path_save


# Hi, name
@dp.message_handler(regexp='(^[Hh]i|^[–ü–ø]—Ä–∏–≤–µ—Ç)')
async def echo(message: types.Message):
    user_full_name = message.from_user.full_name
    answer_text = "–ü—Ä–∏–≤–µ—Ç, {name}!" \
                  "\n–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ –≤—ã–≥–ª—è–¥–∏—à—å!".format(name=user_full_name)
    await message.answer(answer_text)


# cat's foto
@dp.message_handler(regexp='(^cat[s]?$|puss|seba|Seba)')
async def cats(message: types.Message):
    with open('seba/seba_001.jpg', 'rb') as photo:
        await message.reply_photo(photo, caption='Cats are here üò∫')


# Polina's foto
@dp.message_handler(regexp='(^polina|–ü–æ–ª–∏–Ω–∞|–ü–æ–ª—è)')
async def cats(message: types.Message):
    with open('raznoe/beautiful_in_the_world.jpg', 'rb') as photo:
        await message.reply_photo(photo, caption='üòâ')


# echo
@dp.message_handler()
async def echo(message: types.Message):
    await message.answer(message.text)


# run long-poling
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
